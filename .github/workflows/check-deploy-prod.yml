# This is a basic workflow to help you get started with Actions
 
name: Check-deploy-prod

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: 
env:

  FLYWAY_EMAIL: "${{ secrets.FLYWAY_EMAIL }}" # Enter the email address linked to the Redgate Account that created the PAT
  FLYWAY_TOKEN: "${{ secrets.FLYWAY_TOKEN }}" # Enter the PAT Value (This should be treated like a password and thus as a secure variable.

  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002" # This should match the first undo version in your project
 
### DO NOT EDIT BELOW THIS LINE - All variables set in the above section will be consumed by the jobs below and therefore do not require any updates to function ###

jobs:
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'build'
    env:
      stage: 'Build'
      displayName: 'Build'
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        run: flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
        
      # Step 2 - Ensure the Build Database is cleaned of all objects, meaning the build starts from scratch
      - name: Clean Build DB
        run: flyway clean -environment="Build" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false'
     
      # Step 3 - Migrate all scripts from the migration folder, to verify they can be deployed against an empty database. This is the quickest way to get feedback about problematic scripts
      - name: Migrate Build DB
        run: flyway migrate -environment="Build" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -cleanDisabled='false' -baselineOnMigrate="true"
      
      # Step 4 - Undo all relevant migrations using corresponding rollback script, to validate they can be run. This helps to reduce the chance the script will fail during a real life rollback scenario 
      - name: undo Build DB
        run: flyway undo -environment="Build" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" -baselineOnMigrate="true" -cleanDisabled='false' -target="${{ env.FIRST_UNDO_SCRIPT }}"
      
      # GitHub - After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-build-artifact-${{ github.run_number }}
          path: |
              !${{ GITHUB.WORKSPACE }}\flyway-*\**\*
              !${{ GITHUB.WORKSPACE }}\.git\**\*
              !${{ GITHUB.WORKSPACE }}\.git*\**\*
              ${{ GITHUB.WORKSPACE }}\**\schema-model\**\*
              ${{ GITHUB.WORKSPACE }}\**\migrations\**\*
              ${{ GITHUB.WORKSPACE }}\**\Scripts\**\*
              ${{ GITHUB.WORKSPACE }}\**\backups\**\*
              ${{ GITHUB.WORKSPACE }}\**\flyway.toml
              ${{ GITHUB.WORKSPACE }}\**\Filter.scpf

  prod:
    name: Deploy Prod
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'prod'
    needs: build
    
    env:
      stage: 'Prod'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/download-artifact@v4
        with:
          name: flyway-build-artifact-${{ github.run_number }}
     
       # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        run: flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
      
      # Step 2 - Create Check Report 
      - name: Create Check Reports
        run: flyway check -dryrun -changes -drift -environment="Prod" -check.failOnDrift="true" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" "-check.buildEnvironment=Check" "-reportFilename=${{ GITHUB.WORKSPACE }}\reports\AutoPilotProd-Run-${{ GITHUB.RUN_ID }}-Prod-Check-Report.html" 
        
      # Step 3 - Publish Check Report
      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-reports-prod
          path: ${{ GITHUB.WORKSPACE }}\reports\AutoPilotProd-Run-${{ GITHUB.RUN_ID }}-Prod-Check-Report.html
          
      # Step 4 - Deploy pending migrations to target database
      - name: Migrate Production DB
        if: success()
        run: flyway info migrate info -environment="Prod" -baselineOnMigrate="true" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"
